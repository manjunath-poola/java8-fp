Lamda
======
 Anonymous— We say anonymous because it doesn’t have an explicit name like a method would normally have; less to write and think about!
 Function— We say function because a lambda isn’t associated with a particular class like a method is. But like a method, a lambda has a list of parameters, a
body, a return type, and a possible list of exceptions that can be thrown.
 Passed around— A lambda expression can be passed as argument to a method or stored in a variable.
 Concise— You don’t need to write a lot of boilerplate like you do for anonymous classes.

With Lamda
-------------
Before:
    Comparator<Apple> byWeight = new Comparator<Apple>() {
    public int compare(Apple a1, Apple a2){
    return a1.getWeight().compareTo(a2.getWeight());
    }
    };

After (with lambda expressions):

Comparator<Apple> byWeight =
(Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight());


Use case Examples of lambdas
-------------------------------------------------------------------------------------------------------------
A boolean expression               |           (List<String> list) -> list.isEmpty()                         |
-------------------------------------------------------------------------------------------------------------|
Creating                           |          objects () -> new Apple(10)                                    |
-------------------------------------------------------------------------------------------------------------|
Consuming from an object           |         (Apple a) -> {                                                  |
                                   |            System.out.println(a.getWeight());                           |
                                   |           }                                                             |
-------------------------------------------------------------------------------------------------------------|
Select/extract from an object      |       (String s) -> s.length()                                          |
-------------------------------------------------------------------------------------------------------------|
Combine two values                 |      (int a, int b) -> a * b                                            |
-------------------------------------------------------------------------------------------------------------|
Compare two objects                |     (Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight())    |
-------------------------------------------------------------------------------------------------------------

Note : lambdas can be used only in the context of a functional interface.